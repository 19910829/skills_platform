import json
from abc import ABC, abstractmethod

# --- Core Skill Classes ---

class Skill(ABC):
    """
    Abstract base class for all skills.
    Defines common attributes and an abstract method for visual representation.
    """
    def __init__(self, name: str, level: int = 0, description: str = ""):
        if not (0 <= level <= 100):
            raise ValueError("Skill level must be between 0 and 100.")
        self.name = name
        self.level = level
        self.description = description

    def update_level(self, new_level: int):
        """Updates the skill level, ensuring it's within bounds."""
        if not (0 <= new_level <= 100):
            raise ValueError("New skill level must be between 0 and 100.")
        self.level = new_level
        print(f"Updated '{self.name}' level to {self.level}")

    @abstractmethod
    def get_visual_metaphor(self) -> str:
        """
        Abstract method to return a string representation of the visual metaphor.
        This would be rendered graphically in a real GUI.
        """
        pass

    def to_dict(self) -> dict:
        """Converts the skill object to a dictionary for serialization."""
        return {
            "name": self.name,
            "level": self.level,
            "description": self.description,
            "type": self.__class__.__name__ # Store the class name to reconstruct later
        }

class SoftSkill(Skill):
    """
    Represents a soft skill with a 'mana bar' metaphor.
    Mana bar value is directly proportional to the skill level.
    """
    def __init__(self, name: str, level: int = 0, description: str = ""):
        super().__init__(name, level, description)
        self._mana_bar_value = self._calculate_mana_bar()

    def _calculate_mana_bar(self) -> int:
        """Calculates the mana bar value (0-100) based on level."""
        return self.level

    def update_level(self, new_level: int):
        """Updates level and recalculates mana bar."""
        super().update_level(new_level)
        self._mana_bar_value = self._calculate_mana_bar()

    def get_visual_metaphor(self) -> str:
        """Returns a string representation of the mana bar."""
        filled_blocks = int(self._mana_bar_value / 10) # 10 blocks for 100%
        empty_blocks = 10 - filled_blocks
        return f"Mana: [{'█' * filled_blocks}{'░' * empty_blocks}] ({self._mana_bar_value}%)"

class HardSkill(Skill):
    """
    Represents a hard skill with an 'XP tree' metaphor.
    XP tree progress is represented by 'stages' based on level.
    """
    XP_STAGES = {
        0: "Seed",
        10: "Sapling",
        30: "Young Tree",
        60: "Mature Tree",
        90: "Ancient Tree"
    }

    def __init__(self, name: str, level: int = 0, description: str = ""):
        super().__init__(name, level, description)
        self._xp_tree_stage = self._calculate_xp_tree_stage()

    def _calculate_xp_tree_stage(self) -> str:
        """Determines the XP tree stage based on level."""
        current_stage = "Unknown"
        sorted_stages = sorted(self.XP_STAGES.items())
        for threshold, stage_name in sorted_stages:
            if self.level >= threshold:
                current_stage = stage_name
            else:
                break # Levels are sorted, so we can stop
        return current_stage

    def update_level(self, new_level: int):
        """Updates level and recalculates XP tree stage."""
        super().update_level(new_level)
        self._xp_tree_stage = self._calculate_xp_tree_stage()

    def get_visual_metaphor(self) -> str:
        """Returns a string representation of the XP tree stage."""
        return f"XP Tree: {self._xp_tree_stage} (Level: {self.level})"

# --- Skill Category Management ---

class SkillCategory:
    """
    Manages a collection of skills within a specific category.
    Supports adding, removing, and updating skills.
    """
    def __init__(self, name: str):
        self.name = name
        self.skills: dict[str, Skill] = {} # Store skills by name for easy lookup

    def add_skill(self, skill: Skill):
        """Adds a skill to the category."""
        if skill.name in self.skills:
            print(f"Warning: Skill '{skill.name}' already exists in category '{self.name}'.")
        self.skills[skill.name] = skill
        print(f"Added skill '{skill.name}' to category '{self.name}'.")

    def get_skill(self, skill_name: str) -> Skill | None:
        """Retrieves a skill by name."""
        return self.skills.get(skill_name)

    def remove_skill(self, skill_name: str):
        """Removes a skill from the category."""
        if skill_name in self.skills:
            del self.skills[skill_name]
            print(f"Removed skill '{skill_name}' from category '{self.name}'.")
        else:
            print(f"Error: Skill '{skill_name}' not found in category '{self.name}'.")

    def display_category_skills(self):
        """Displays all skills within this category."""
        print(f"\n--- Category: {self.name} ---")
        if not self.skills:
            print("No skills in this category yet.")
            return
        for skill_name, skill in self.skills.items():
            print(f"  - {skill.name} (Level: {skill.level}): {skill.description}")
            print(f"    {skill.get_visual_metaphor()}")

    def to_dict(self) -> dict:
        """Converts the category and its skills to a dictionary for serialization."""
        return {
            "name": self.name,
            "skills": [skill.to_dict() for skill in self.skills.values()]
        }

# --- Platform Manager ---

class SkillPlatformManager:
    """
    Manages all skill categories and provides overall platform functionalities.
    """
    def __init__(self):
        self.categories: dict[str, SkillCategory] = {} # Store categories by name

    def add_category(self, category_name: str):
        """Adds a new skill category."""
        if category_name in self.categories:
            print(f"Warning: Category '{category_name}' already exists.")
            return
        self.categories[category_name] = SkillCategory(category_name)
        print(f"Category '{category_name}' added.")

    def get_category(self, category_name: str) -> SkillCategory | None:
        """Retrieves a skill category by name."""
        return self.categories.get(category_name)

    def remove_category(self, category_name: str):
        """Removes a skill category."""
        if category_name in self.categories:
            del self.categories[category_name]
            print(f"Category '{category_name}' removed.")
        else:
            print(f"Error: Category '{category_name}' not found.")

    def display_all_skills(self):
        """Displays all skills across all categories."""
        if not self.categories:
            print("No skill categories defined yet.")
            return
        print("\n--- All Skills ---")
        for category in self.categories.values():
            category.display_category_skills()

    # --- Persistence (Simplified to JSON) ---
    def save_data(self, filename: str = "skills_data.json"):
        """Saves all skill data to a JSON file."""
        data = {name: category.to_dict() for name, category in self.categories.items()}
        try:
            with open(filename, 'w') as f:
                json.dump(data, f, indent=4)
            print(f"Skill data saved to {filename}")
        except IOError as e:
            print(f"Error saving data: {e}")

    def load_data(self, filename: str = "skills_data.json"):
        """Loads skill data from a JSON file."""
        try:
            with open(filename, 'r') as f:
                data = json.load(f)
            self.categories = {} # Clear existing data
            for cat_name, cat_data in data.items():
                category = SkillCategory(cat_name)
                for skill_data in cat_data["skills"]:
                    skill_type = skill_data.pop("type") # Get the skill type
                    if skill_type == "SoftSkill":
                        skill = SoftSkill(**skill_data)
                    elif skill_type == "HardSkill":
                        skill = HardSkill(**skill_data)
                    else:
                        print(f"Warning: Unknown skill type '{skill_type}' for skill '{skill_data['name']}'. Skipping.")
                        continue
                    category.add_skill(skill)
                self.categories[cat_name] = category
            print(f"Skill data loaded from {filename}")
        except FileNotFoundError:
            print(f"No data file found at {filename}. Starting fresh.")
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from {filename}: {e}")
        except IOError as e:
            print(f"Error loading data: {e}")

    # --- Placeholder for Export Functionality ---
    def export_as_pdf(self, filename: str = "skills_report.pdf"):
        """
        Placeholder for PDF export functionality.
        In a real application, you would use a library like ReportLab or FPDF2.
        """
        print(f"\n--- Exporting skills to PDF (conceptual) ---")
        print(f"Generating a PDF report for your skills and saving to '{filename}'...")
        print("This would involve iterating through all skills and categories,")
        print("formatting them, and using a PDF generation library.")
        print("Example: using ReportLab to draw text, shapes for mana bars, and tree structures for XP.")
        # Example pseudo-code for PDF generation:
        # from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
        # from reportlab.lib.styles import getSampleStyleSheet
        # doc = SimpleDocTemplate(filename)
        # styles = getSampleStyleSheet()
        # story = []
        # story.append(Paragraph("My Skill Report", styles['h1']))
        # for category in self.categories.values():
        #     story.append(Paragraph(f"Category: {category.name}", styles['h2']))
        #     for skill in category.skills.values():
        #         story.append(Paragraph(f"{skill.name} (Level: {skill.level})", styles['h3']))
        #         story.append(Paragraph(skill.get_visual_metaphor(), styles['Normal']))
        #         story.append(Spacer(1, 0.2*inch))
        # doc.build(story)
        print("PDF export complete (conceptually).")

    def export_to_notion(self):
        """
        Placeholder for Notion embed functionality.
        In a real application, you would use the Notion API.
        """
        print(f"\n--- Exporting skills to Notion (conceptual) ---")
        print("Connecting to Notion API to create/update a page or database...")
        print("This would involve authenticating with Notion, structuring your skill data,")
        print("and sending requests to create blocks or database entries.")
        print("Example: using the 'notion-client' library to add skills as database items.")
        # Example pseudo-code for Notion integration:
        # from notion_client import Client
        # notion = Client(auth="YOUR_NOTION_API_KEY")
        # database_id = "YOUR_NOTION_DATABASE_ID"
        # for category in self.categories.values():
        #     for skill in category.skills.values():
        #         notion.pages.create(
        #             parent={"database_id": database_id},
        #             properties={
        #                 "Name": {"title": [{"text": {"content": skill.name}}]},
        #                 "Level": {"number": skill.level},
        #                 "Type": {"select": {"name": skill.__class__.__name__}},
        #                 "Description": {"rich_text": [{"text": {"content": skill.description}}]},
        #                 "Metaphor": {"rich_text": [{"text": {"content": skill.get_visual_metaphor()}}]}
        #             }
        #         )
        print("Notion export complete (conceptually).")

    # --- Placeholder for Auto-Suggestion Functionality ---
    def auto_suggest_skills_github(self, github_username: str):
        """
        Placeholder for auto-suggesting skills based on GitHub activity.
        Requires GitHub API integration.
        """
        print(f"\n--- Auto-suggesting skills from GitHub for '{github_username}' (conceptual) ---")
        print("Connecting to GitHub API to fetch repositories, languages, and commit history...")
        print("This would involve using a library like 'requests' to call GitHub's REST API,")
        print("parsing the response to identify frequently used languages, frameworks, or topics,")
        print("and suggesting them as new skills or updates to existing ones.")
        # Example pseudo-code for GitHub API:
        # import requests
        # response = requests.get(f"https://api.github.com/users/{github_username}/repos")
        # repos = response.json()
        # for repo in repos:
        #     print(f"Found language: {repo.get('language')}")
        #     # Logic to process languages and suggest skills
        print("GitHub auto-suggestion complete (conceptually).")

    def auto_suggest_skills_vscode(self, vscode_usage_data_path: str):
        """
        Placeholder for auto-suggesting skills based on VSCode usage.
        This would typically involve parsing local VSCode telemetry or extension data.
        """
        print(f"\n--- Auto-suggesting skills from VSCode usage data (conceptual) ---")
        print(f"Attempting to parse VSCode usage data from '{vscode_usage_data_path}'...")
        print("This would involve understanding the structure of VSCode's internal data files,")
        print("parsing them to identify frequently used extensions, languages, or commands,")
        print("and suggesting relevant skills.")
        print("Note: Accessing VSCode internal data directly might be complex and platform-dependent.")
        print("VSCode auto-suggestion complete (conceptually).")

    def auto_suggest_skills_stackoverflow(self, stackoverflow_user_id: str):
        """
        Placeholder for auto-suggesting skills based on Stack Overflow history.
        Requires Stack Overflow API integration.
        """
        print(f"\n--- Auto-suggesting skills from Stack Overflow for user ID '{stackoverflow_user_id}' (conceptual) ---")
        print("Connecting to Stack Overflow API to fetch user's questions, answers, and tags...")
        print("This would involve using a library like 'requests' to call Stack Overflow's API,")
        print("parsing the response to identify frequently used tags, accepted answers, or badges,")
        print("and suggesting them as new skills.")
        # Example pseudo-code for Stack Overflow API:
        # import requests
        # response = requests.get(f"https://api.stackexchange.com/2.3/users/{stackoverflow_user_id}/tags?site=stackoverflow")
        # tags_data = response.json()
        # for item in tags_data.get('items', []):
        #     print(f"Found Stack Overflow tag: {item.get('name')}")
        #     # Logic to process tags and suggest skills
        print("Stack Overflow auto-suggestion complete (conceptually).")

# --- Main Application Loop (Text-based Simulation) ---

def main():
    manager = SkillPlatformManager()
    manager.load_data() # Try to load existing data

    while True:
        print("\n--- Skill Management Platform Menu ---")
        print("1. Add Skill Category")
        print("2. Add Skill to Category")
        print("3. Update Skill Level")
        print("4. Remove Skill from Category")
        print("5. Remove Skill Category")
        print("6. Display All Skills")
        print("7. Export Skills (PDF/Notion - conceptual)")
        print("8. Auto-Suggest Skills (GitHub/VSCode/Stack Overflow - conceptual)")
        print("9. Save Data")
        print("10. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            cat_name = input("Enter new category name: ")
            manager.add_category(cat_name)
        elif choice == '2':
            cat_name = input("Enter category name to add skill to: ")
            category = manager.get_category(cat_name)
            if category:
                skill_type = input("Enter skill type (soft/hard): ").lower()
                skill_name = input("Enter skill name: ")
                skill_desc = input("Enter skill description (optional): ")
                try:
                    skill_level = int(input("Enter initial skill level (0-100): "))
                    if skill_type == 'soft':
                        skill = SoftSkill(skill_name, skill_level, skill_desc)
                    elif skill_type == 'hard':
                        skill = HardSkill(skill_name, skill_level, skill_desc)
                    else:
                        print("Invalid skill type. Please enter 'soft' or 'hard'.")
                        continue
                    category.add_skill(skill)
                except ValueError as e:
                    print(f"Invalid input: {e}")
            else:
                print(f"Category '{cat_name}' not found.")
        elif choice == '3':
            cat_name = input("Enter category name of the skill: ")
            skill_name = input("Enter skill name to update: ")
            category = manager.get_category(cat_name)
            if category:
                skill = category.get_skill(skill_name)
                if skill:
                    try:
                        new_level = int(input(f"Enter new level for '{skill_name}' (0-100): "))
                        skill.update_level(new_level)
                    except ValueError as e:
                        print(f"Invalid input: {e}")
                else:
                    print(f"Skill '{skill_name}' not found in category '{cat_name}'.")
            else:
                print(f"Category '{cat_name}' not found.")
        elif choice == '4':
            cat_name = input("Enter category name to remove skill from: ")
            skill_name = input("Enter skill name to remove: ")
            category = manager.get_category(cat_name)
            if category:
                category.remove_skill(skill_name)
            else:
                print(f"Category '{cat_name}' not found.")
        elif choice == '5':
            cat_name = input("Enter category name to remove: ")
            manager.remove_category(cat_name)
        elif choice == '6':
            manager.display_all_skills()
        elif choice == '7':
            export_choice = input("Export to (pdf/notion): ").lower()
            if export_choice == 'pdf':
                manager.export_as_pdf()
            elif export_choice == 'notion':
                manager.export_to_notion()
            else:
                print("Invalid export choice.")
        elif choice == '8':
            suggest_choice = input("Suggest from (github/vscode/stackoverflow): ").lower()
            if suggest_choice == 'github':
                username = input("Enter GitHub username: ")
                manager.auto_suggest_skills_github(username)
            elif suggest_choice == 'vscode':
                data_path = input("Enter VSCode usage data path (conceptual): ")
                manager.auto_suggest_skills_vscode(data_path)
            elif suggest_choice == 'stackoverflow':
                user_id = input("Enter Stack Overflow user ID: ")
                manager.auto_suggest_skills_stackoverflow(user_id)
            else:
                print("Invalid auto-suggestion choice.")
        elif choice == '9':
            manager.save_data()
        elif choice == '10':
            manager.save_data() # Save before exiting
            print("Exiting Skill Management Platform. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
